import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
from transformers import BlipProcessor, BlipForConditionalGeneration
from googletrans import Translator
from ultralytics import YOLO
import torch

# T·∫£i m√¥ h√¨nh BLIP
blip_processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
blip_model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

# T·∫£i m√¥ h√¨nh YOLOv8
yolo_model = YOLO("yolo11n.pt")

selected_files = []  # Danh s√°ch c√°c ·∫£nh ƒë√£ ch·ªçn

# H√†m m√¥ t·∫£ ·∫£nh b·∫±ng BLIP
def generate_caption(image_path):
    raw_image = Image.open(image_path).convert('RGB')
    inputs = blip_processor(raw_image, return_tensors="pt")
    out = blip_model.generate(**inputs)
    return blip_processor.decode(out[0], skip_special_tokens=True)

# H√†m d·ªãch ti·∫øng Anh sang ti·∫øng Vi·ªát
def translate_to_vietnamese(text):
    translator = Translator()
    result = translator.translate(text, src='en', dest='vi')
    return result.text

# H√†m x·ª≠ l√Ω m√¥ t·∫£ ·∫£nh
def process_image(file_path):
    # Hi·ªÉn th·ªã ·∫£nh
    img = Image.open(file_path)
    img_resized = img.resize((400, 300))
    img_tk = ImageTk.PhotoImage(img_resized)
    panel.configure(image=img_tk)
    panel.image = img_tk

    # Hi·ªÉn th·ªã tr·∫°ng th√°i
    status_label.config(text="‚è≥ ƒêang x·ª≠ l√Ω...")
    root.update()

    try:
        # Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng b·∫±ng YOLO
        results = yolo_model(file_path)
        objects = results[0].names
        detected = list(set([objects[int(cls)] for cls in results[0].boxes.cls]))
        detected_objects = ", ".join(detected) if detected else "Kh√¥ng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng n√†o"

        # M√¥ t·∫£ b·∫±ng BLIP
        caption_en = generate_caption(file_path)

        # D·ªãch sang ti·∫øng Vi·ªát
        caption_vi = translate_to_vietnamese(caption_en)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, f"üîç C√°c ƒë·ªëi t∆∞·ª£ng ph√°t hi·ªán: {detected_objects}\n")
        result_text.insert(tk.END, f"üìù M√¥ t·∫£ (EN): {caption_en}\n")
        result_text.insert(tk.END, f"üìù M√¥ t·∫£ (VI): {caption_vi}")
    except Exception as e:
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, f"‚ùå L·ªói: {e}")
    finally:
        status_label.config(text="‚úÖ Ho√†n t·∫•t.")

# Ch·ªçn 1 ·∫£nh v√† x·ª≠ l√Ω lu√¥n
def choose_single_image():
    file_path = filedialog.askopenfilename(title="Ch·ªçn 1 ·∫£nh", filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")])
    if file_path:
        dropdown_menu.pack_forget()
        process_image(file_path)

# Ch·ªçn nhi·ªÅu ·∫£nh v√† hi·ªÉn th·ªã menu ch·ªçn
def choose_multiple_images():
    global selected_files
    selected_files = list(filedialog.askopenfilenames(title="Ch·ªçn nhi·ªÅu ·∫£nh", filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp")]))
    if not selected_files:
        return

    # Hi·ªán menu ƒë·ªÉ ch·ªçn 1 ·∫£nh ƒë·ªÉ x·ª≠ l√Ω
    selected_var.set(selected_files[0])
    dropdown_menu['menu'].delete(0, 'end')
    for path in selected_files:
        display_name = path.split("/")[-1] if "/" in path else path.split("\\")[-1]
        dropdown_menu['menu'].add_command(label=display_name, command=lambda p=path: on_dropdown_select(p))
    dropdown_menu.pack(pady=5)

# Khi ng∆∞·ªùi d√πng ch·ªçn ·∫£nh t·ª´ menu
def on_dropdown_select(file_path):
    selected_var.set(file_path)
    process_image(file_path)

# ======= GIAO DI·ªÜN =======
root = tk.Tk()
root.title("üì∑ Nh·∫≠n di·ªán ng·ªØ c·∫£nh b·∫±ng YOLOv8 + BLIP + Translate")

panel = tk.Label(root)
panel.pack()

# Hai n√∫t: Ch·ªçn 1 ·∫£nh / nhi·ªÅu ·∫£nh
btn_single = tk.Button(root, text="üñºÔ∏è Ch·ªçn 1 ·∫£nh", command=choose_single_image, height=2, width=20, bg='lightgreen')
btn_single.pack(pady=5)

btn_multi = tk.Button(root, text="üñºÔ∏è Ch·ªçn nhi·ªÅu ·∫£nh", command=choose_multiple_images, height=2, width=20, bg='orange')
btn_multi.pack(pady=5)

# Menu ch·ªçn ·∫£nh n·∫øu nhi·ªÅu
selected_var = tk.StringVar(root)
dropdown_menu = tk.OptionMenu(root, selected_var, "")

status_label = tk.Label(root, text="", font=("Arial", 10), fg="blue")
status_label.pack()

result_text = tk.Text(root, height=10, width=60, wrap=tk.WORD)
result_text.pack(padx=10, pady=10)

root.mainloop()
